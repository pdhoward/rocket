extends layout

block header
  .banner.verify-required(class={"showing": !showBanner && !stripeVerified})
    .message 
      strong Your account needs to be verified.
      |&nbsp; #[a(href="/pilots/stripe/verify") Verify now >]
  .banner.verify-pending(class={"showing": showBanner && !stripeVerified})
    .message
      strong Verifying your account.
      | This should take just a few minutes.
  .banner.verify-complete(class={"showing": showBanner && stripeVerified})
    .message
      strong Your account has been verified. 
      | Fire up your rocket and take your first deliveries.

block content
  .dashboard
    .user
      .block.profile
        .photo
        p Delivery pilot since #{moment(pilot.created).format('MMM YYYY')}
        h1 #{pilot.displayName()}

      .block.week
        p This week
        h1 $#{(ridesTotalAmount / 100).toFixed(2)}
        h2 #{rides.length} deliveries
      .block.available
        p Your balance
        h1 $#{((balanceAvailable + balancePending) / 100).toFixed(2)}
        h2 $#{(balanceAvailable / 100).toFixed(2)} available
      .block.stripe
        form.payout(action='/pilots/stripe/payout', method='POST', autocomplete='off')
          input(class='primary' type='submit', value='Pay out now' disabled=(balanceAvailable===0))
        if !stripeVerified
          if stripeVerifiedReason === 'requirements.pending_verification'
            p#verified Account verification is pending
          else
            p#verified
              a(href='/pilots/stripe/verify') Verify your account
        else
         p#verified Your account is verified
    section.rides
      h4 Recent deliveries
      if rides.length == 0
        .no-rides
          .rocket
          h1 No deliveries to display yet
          h2 Deliver some packages!
      else
        .list
          each ride in rides
            .row
              .cell.name= ride.passenger.displayName()
              .cell.date= moment(new Date(Date.parse(ride.created))).calendar()
              .cell.price $#{(ride.amountForPilot() / 100).toFixed(2)}

block footer
  .annotation.card.dashboard-banner(class=(showBanner ? '' : 'hidden'))
    h4 The Connect Custom account for this delivery pilot has been created.
    .description
      p Payouts are disabled until the delivery pilot completes verification. Using the #[strong Stripe account ID], we could submit identity details via the API, or we can simply use #[a(href="https://stripe.com/docs/connect/connect-onboarding") Connect Onboarding].
      p This account ID can then be used to #[a(href="https://stripe.com/docs/api/balance/balance_retrieve" target="_blank") retrieve the pilotâ€™s balance], provide a #[a(href="https://stripe.com/docs/connect/destination-charges" target="_blank") destination for payments], or #[a(href="https://stripe.com/docs/connect/payouts#instant-payouts" target="_blank") create Instant Payouts].
    form.right
      button.primary-action.next Next step
  .annotation.card.dashboard-simulate(class=(showBanner ? 'hidden' : ''))
    h4 Simulate a delivery to create a payment for this pilot.
    .description
      ol
        li The balance is automatically fetched from the Stripe API.
        li #[strong View payouts on Stripe] lets delivery pilots see their payouts or edit their account information.
        li #[strong Pay out now] uses the Stripe API to #[a(href="https://stripe.com/docs/connect/payouts#instant-payouts" target="_blank") generate a payout] of the available balance.
    form(action='/pilots/rides', method='POST', autocomplete='off')
      input(id="create-delivery" type='submit', name="immediate_balance", value='Deliver a package', class='primary-action' disabled=(!stripeVerified))
      if !stripeVerified
        p#create-delivery-unverified This account is not yet verified.


block js
  script.
    let pilotVerified = "#{stripeVerified}" !== "false";

    // Poll the server to see if the pilot is verified
    let repeatCheckVerification;
    if (!pilotVerified) {
      repeatCheckVerification = setInterval(checkVerification, 2000);
    }

    // Check the pilot's verification status on the server
    async function checkVerification() {
      try {
        const response = await fetch('/pilots/verified');
        const isVerified = await response.json();

        // If they're succesfully verified via Connect Onboarding, stop polling 
        if (isVerified.stripeVerified) {
          clearInterval(repeatCheckVerification);
          verifiedPilot();
        }
      } catch (e) {
        console.log('Error while checking if pilot is verified:', e)
      }
    }
    
    function verifiedPilot() {
      console.log('This pilot is verified.');
      // Update the Dashboard to show the pilot is now verified
      document.getElementById('verified').textContent = 'Your account is verified';
      document.getElementById('create-delivery').disabled = false;
      document.getElementById('create-delivery-unverified').remove();
      // Update the banner to show that verification has succeeded
      document.querySelectorAll('.banner')
        .forEach(banner => banner.classList.remove('showing'));
      document.querySelector('.banner.verify-complete').classList.add('showing');
    }
